{"version":3,"sources":["webpack:///./src/games/disc_destroyer/DiscDestroyer.vue?b7e1","webpack:///./src/games/disc_destroyer/DiscDestroyer.vue","webpack:///./src/models/ScreenCircle.ts","webpack:///./src/games/disc_destroyer/SpriteStateShrink.ts","webpack:///./src/games/disc_destroyer/SpriteStateDie.ts","webpack:///./src/games/disc_destroyer/Enemy.ts","webpack:///./src/games/disc_destroyer/Projectile.ts","webpack:///./src/games/disc_destroyer/ExplosionParticle.ts","webpack:///./src/games/disc_destroyer/Explosion.ts","webpack:///./src/games/disc_destroyer/DiscDestroyerWorld.ts","webpack:///./src/games/disc_destroyer/GameStatePaused.ts","webpack:///./src/games/disc_destroyer/Player.ts","webpack:///./src/games/disc_destroyer/DiscDestroyer.vue?643b","webpack:///./src/games/disc_destroyer/DiscDestroyer.vue?6550","webpack:///./node_modules/core-js/internals/array-fill.js","webpack:///./node_modules/core-js/modules/es.array.fill.js"],"names":["ref","class","tabindex","href","toggle_pause","game_world","is_paused","player","health","score","Math","floor","accuracy","type","start_game","location","velocity","radius","bounding_box","fill_color","Color","create_random","ctx","beginPath","arc","this","x","y","PI","fillStyle","rgba","fill","p","speed","atan2","Point","sin","cos","side","random","width","height","Rect","centered_at","Sprite","sprite","shrink_amount","shrinK_speed","old_state","state","delta_time","shrink_by","work_complete","SpriteState","kill","origin","grow","Enemy","colors","length","teleport_to_random_border_location","move_to","center","shooter","target_location","copy","shots_fired","update_accuracy_score","explosion","color","alpha","decay_rate","new_alpha","exploder","particle_size","particle_count","particles","i","push","filter","particle","update","status","SpriteStatus","Dead","forEach","draw_sprite","null_rect","spawn_rate","_player","reset","sprites","enemies","viewport","projectiles","enemy","compare_distance","projectile","take_damage","hits","explosions","round","GameStatus","Paused","GameWorld","world","fillRect","GameWorldState","_accuracy","_score","new_score","modal_element","options","dataset","modalShow","setup","game_container","game_canvas","game_start_modal","game_over_modal","screen_rect","midpoint","game_starting_state","Starting","will_update","will_draw","game_over_state","GameOver","modals","game_over","screen_was_clicked","event","value","offset","total_offset","fire_projectile_to","pageX","pageY","element","el","offsetLeft","offsetTop","offsetParent","init_game","backdrop","getContext","canvas","parentElement","addEventListener","setInterval","draw","performance","now","clearRect","requestAnimationFrame","new_state","hide","show","new_health","old_health","render","__scopeId","toObject","toAbsoluteIndex","toLength","module","exports","O","argumentsLength","arguments","index","undefined","end","endPos","$","addToUnscopables","target","proto"],"mappings":"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","file":"js/chunk-0a98e8fa.2437ee08.js","sourcesContent":["export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./DiscDestroyer.vue?vue&type=style&index=0&id=59b8d771&scoped=true&lang=scss\"","<template>\n  <div ref=\"game_container\" class=\"game-content mt-1\" >\n    <div class=\"game-controls\">\n      <button class=\"btn btn-secondary\" @click=\"toggle_pause\">{{game_world.is_paused ? \"Resume\" : \"Pause\"}}</button>\n    </div>\n    <div class=\"game-screen\">\n      <div class=\"overlay\">\n        <div>Health: {{player.health}}</div>\n        <div>Score: {{player.score}}</div>\n        <div>Accuracy: {{Math.floor(player.accuracy*100)}}%</div>\n      </div>\n      <canvas ref=\"game_canvas\" />\n    </div>\n    <div ref=\"game_start_modal\" class=\"game-modal\">\n      <div class=\"modal\" tabindex=\"-1\">\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\">Disc Destroyer</h5>\n            </div>\n            <div class=\"modal-body\">\n              <p>Welcome to <em>Disc Destroyer</em>.  This game is still a work in progress. Continue at your own risk.</p>\n              <p><a href=\"https://github.com/wadewest/vue3-arcade/issues\">Report Bugs</a></p>\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-primary\" @click=\"start_game\">Start Game</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div ref=\"game_over_modal\" class=\"game-modal\">\n      <div class=\"modal\" tabindex=\"-1\">\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\">Game Over</h5>\n            </div>\n            <div class=\"modal-body\">\n              <h2>Your Score: {{game_world.player.score}}</h2>\n              <p>Would you like to play again?</p>\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-primary\" @click=\"start_game\">New Game</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n//import { Modal } from 'bootstrap';\nimport DiscDestroyerWorld from './DiscDestroyerWorld';\nimport GameStatePaused from './GameStatePaused';\nimport Player from './Player';\nimport Point from '@/models/Point';\nimport Rect from '@/models/Rect';\nimport ScreenCircle from '@/models/ScreenCircle';\n\nimport { ref, watch, onMounted, onBeforeUnmount, Ref, reactive } from 'vue';\nimport GameWorldState from '@/models/GameWorldState';\nimport { GameStatus } from '@/models/GameStatus';\n\nclass Modal {\n\n  modal_element: HTMLElement;\n\n  constructor(modal_element:HTMLElement, options:any) {\n    this.modal_element = modal_element;\n  }\n\n  show() {\n    this.modal_element.dataset.modalShow = '';\n  }\n\n  hide() {\n    delete this.modal_element.dataset.modalShow;\n  }\n\n}\n\nexport default {\n  setup() {\n    const game_container: Ref<HTMLDivElement|null> = ref(null);\n    const game_canvas: Ref<HTMLCanvasElement|null> = ref(null);\n    const game_start_modal: Ref<HTMLDivElement|null> = ref(null);\n    const game_over_modal: Ref<HTMLDivElement|null> = ref(null);\n\n    const screen_rect = new Rect(0, 0, 640, 480);\n    const player = reactive(new Player(screen_rect.midpoint(), screen_rect.copy())) as Player;\n    const game_world = reactive(new DiscDestroyerWorld(player)) as DiscDestroyerWorld;\n\n    const game_starting_state = new GameWorldState(game_world, GameStatus.Starting);\n    game_starting_state.will_update = () => false;\n    game_starting_state.will_draw = () => false;\n\n    const game_over_state = new GameWorldState(game_world, GameStatus.GameOver);\n\n\n    const modals = {\n      start_game: <Modal|null>null,\n      game_over: <Modal|null>null,\n    };\n\n    function screen_was_clicked(event:MouseEvent): void {\n      if(!game_canvas.value) return;\n      const offset = total_offset(game_canvas.value);\n      game_world.fire_projectile_to(new Point(\n        event.pageX - offset.x,\n        event.pageY - offset.y\n      ));\n    }\n\n    function total_offset(element:HTMLElement): Point {\n      const offset = new Point(0,0);\n      let el = element;\n      do {\n        offset.x += el.offsetLeft;\n        offset.y += el.offsetTop;\n        if(!el.offsetParent) return offset;\n        el = el.offsetParent as HTMLElement;\n      } while(true);\n    }\n\n    function init_game(): void {\n      if(!(game_canvas.value && game_container.value)) return;\n      modals.start_game = new Modal(game_start_modal.value as HTMLDivElement, {backdrop: 'static'});\n      modals.game_over = new Modal(game_over_modal.value as HTMLDivElement, {backdrop: 'static'});\n      game_canvas.value.width = screen_rect.width;\n      game_canvas.value.height = screen_rect.height;\n      game_world.state = game_starting_state;\n      const ctx = game_canvas.value.getContext('2d') as CanvasRenderingContext2D;\n      game_world.setup(ctx);\n      ctx.canvas.parentElement?.addEventListener('click', screen_was_clicked);\n      setInterval(update, 0);\n      draw(ctx);\n    }\n    onMounted(init_game);\n\n    function start_game() {\n      game_world.reset();\n      game_world.state = new GameWorldState(game_world);\n    }\n\n    function update() {\n      game_world.update(Math.floor(performance.now())/1000);\n    }\n\n    function draw(ctx:CanvasRenderingContext2D) {\n      ctx.clearRect(0, 0, screen_rect.width, screen_rect.height);\n      game_world.draw(ctx);\n      requestAnimationFrame(() => draw(ctx));\n    }\n\n    function toggle_pause() {\n      if(game_world.is_paused) {\n        game_world.state.work_complete();\n      } else {\n        game_world.state = new GameStatePaused(game_world);\n      }\n    }\n\n    watch( () => game_world.state, (new_state, old_state) => {\n      modals.start_game?.hide();\n      modals.game_over?.hide();\n      switch(game_world.status) {\n        case GameStatus.Starting:\n          modals.start_game?.show();\n          break;\n        case GameStatus.GameOver:\n          modals.game_over?.show();\n          break;\n      }\n    });\n\n    watch( () => game_world.player.health, (new_health, old_health) => {\n      if(new_health <= 0) game_world.state = game_over_state;\n    });\n\n    return {\n      player,\n      game_world,\n      game_container,\n      game_canvas,\n      game_start_modal,\n      game_over_modal,\n      start_game,\n      toggle_pause,\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import '@/assets/css/styles.scss';\n\n.game-content {\n\n  position: relative;\n  padding: 10px;\n\n  .game-modal {\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 200ms ease-in;\n    position: absolute;\n    z-index: -10001;\n    top: 0;\n    left: 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    border: 4px solid rgba(0, 255, 255, 0.5);\n    width: 100%;\n    height: 100%;\n    border-radius: 15px;\n    display: grid;\n    grid-template-columns: auto max-content auto;\n    grid-template-rows: auto max-content auto;\n    grid-template-areas: \n      \". . .\"\n      \". modal .\"\n      \". . .\";\n\n    .modal {\n      margin: 0;\n      position: static;\n      display: block;\n      grid-area: modal;\n\n      .modal-dialog {\n        margin: 0;\n      }\n\n    }\n\n    &[data-modal-show] {\n      opacity: 1;\n      pointer-events: auto;\n      z-index: 10001;\n    }\n\n  }\n\n}\n\n\n</style>\n","import Sprite from '@/models/Sprite';\nimport Point from '@/models/Point';\nimport Rect from '@/models/Rect';\nimport Color from './Color';\n\nexport default class ScreenCircle extends Sprite {\n  radius: number;\n  fill_color: Color = Color.create_random();\n\n  constructor(location:Point, velocity:Point|null, radius:number, bounding_box:Rect) {\n    super(location, velocity, bounding_box);\n    this.radius = radius;\n  }\n\n  get collision_box():Rect {\n    return Rect.centered_at(this.location, this.radius*2, this.radius*2);\n  }\n\n  draw_sprite(ctx:CanvasRenderingContext2D): void {\n    ctx.beginPath();\n    ctx.arc(this.location.x, this.location.y, this.radius, 0, 2*Math.PI, false);\n    ctx.fillStyle = this.fill_color.rgba;\n    ctx.fill();\n  }\n\n  move_to(p:Point, speed:number = 1): this {\n    let atan2 = Math.atan2( \n      p.x - this.location.x,\n      p.y - this.location.y\n    );\n    this.velocity = new Point(\n      Math.sin(atan2)*speed, \n      Math.cos(atan2)*speed\n    );\n    return this;\n  }\n\n  teleport_to_random_border_location(): this {\n    let side = Math.floor(Math.random()*4);\n    switch(side) {\n      case 0: // top\n        this.location.x = this.bounding_box.x + Math.random()*(this.bounding_box.width-this.radius*2) - this.radius;\n        this.location.y = this.bounding_box.y + this.radius;\n        break;\n      case 1: // right\n        this.location.x = this.bounding_box.x + this.bounding_box.width - this.radius;\n        this.location.y = this.bounding_box.y + Math.random()*(this.bounding_box.height-this.radius*2) - this.radius;\n        break;\n      case 2: // bottom\n        this.location.x = this.bounding_box.x + Math.random()*(this.bounding_box.width-this.radius*2) - this.radius;\n        this.location.y = this.bounding_box.y + this.bounding_box.height - this.radius;\n        break;\n      case 3: // left\n        this.location.x = this.bounding_box.x + this.radius;\n        this.location.y = this.bounding_box.y + Math.random()*(this.bounding_box.height-this.radius*2) - this.radius;\n        break;\n    }\n    return this;\n  }\n\n}\n\n","import SpriteState from '@/models/SpriteState';\nimport Enemy from './Enemy';\n\nexport default class SpriteStateShrink extends SpriteState {\n\n  old_state: SpriteState;\n  shrink_amount: number = 5;\n  shrinK_speed: number = 2;\n\n  constructor(sprite:Enemy) {\n    super(sprite);\n    this.old_state = sprite.state;\n  }\n\n  work_complete(): void {\n    this.sprite.state = this.old_state;\n  }\n\n  will_update(delta_time:number): boolean {\n    const shrink_by = this.shrink_amount * delta_time * this.shrinK_speed;\n    (this.sprite as Enemy).radius -= shrink_by;\n    this.shrink_amount -= shrink_by;\n    if(this.shrink_amount <= 0.1) this.work_complete();\n    return super.will_update(delta_time);\n  }\n\n}\n","import Enemy from './Enemy';\nimport SpriteStateShrink from './SpriteStateShrink';\n\nexport default class SpriteStateDie extends SpriteStateShrink {\n\n  constructor(sprite:Enemy) {\n    super(sprite);\n    this.shrink_amount = sprite.radius;\n    this.shrinK_speed = 25;\n  }\n\n  work_complete():void {\n    this.sprite.kill();\n  }\n\n}\n","import Color from '@/models/Color';\nimport Point from '@/models/Point';\nimport Rect from '@/models/Rect';\nimport ScreenCircle from '@/models/ScreenCircle';\nimport SpriteState from '@/models/SpriteState';\nimport SpriteStateDie from './SpriteStateDie';\nimport SpriteStateShrink from './SpriteStateShrink';\n\nexport default class Enemy extends ScreenCircle {\n\n  health: number;\n  speed: number;\n  static colors = [\n    new Color(255, 0, 255),\n    new Color(255, 127, 255),\n    new Color(0, 127, 127),\n    new Color(0, 255, 255),\n  ];\n\n  constructor(bounding_box:Rect) {\n    super(Point.origin, null, 0, bounding_box);\n    this.speed = 15+Math.floor(Math.random()*6);\n    this.health = 2+Math.floor(Math.random()*4);\n    this.radius = 5+this.health*5;\n    this.bounding_box = this.bounding_box.grow(this.radius*4, this.radius*4);\n    this.fill_color = Enemy.colors[Math.floor(Math.random()*Enemy.colors.length)];\n    this.teleport_to_random_border_location();\n    this.move_to(this.bounding_box.center, this.speed);\n  }\n\n  take_damage(): void {\n    this.health -= 1;\n    if(this.health <= 0) {\n      this.state = new SpriteStateDie(this);\n    } else {\n      this.state = new SpriteStateShrink(this);\n      this.speed *= 1.5;\n      this.move_to(this.bounding_box.center, this.speed);\n    }\n  }\n\n}\n","import Color from '@/models/Color';\nimport Point from '@/models/Point';\nimport ScreenCircle from '@/models/ScreenCircle';\nimport Player from './Player';\n\nexport default class Projectile extends ScreenCircle {\n\n  shooter: Player;\n\n  constructor(shooter:Player, target_location:Point) {\n    super(shooter.location.copy(), null, 2, shooter.bounding_box.grow(5, 5));\n    this.move_to(target_location, 500);\n    shooter.shots_fired += 1;\n    this.shooter = shooter;\n    this.fill_color = new Color(255, 0, 0);\n  }\n\n  did_leave_bounding_box(): void {\n    super.did_leave_bounding_box();\n    this.shooter.update_accuracy_score()\n  };\n\n}\n","import Color from '@/models/Color';\nimport Point from '@/models/Point';\nimport ScreenCircle from '@/models/ScreenCircle';\nimport Explosion from './Explosion';\n\nexport default class ExplosionParticle extends ScreenCircle {\n\n  decay_rate: number;\n\n  constructor(explosion:Explosion, color:Color, radius:number = 2) {\n    super(explosion.location.copy(), null, radius, explosion.bounding_box.copy());\n    this.fill_color = color.copy();\n    this.fill_color.alpha = 1.0;\n    this.move_to(\n      new Point(\n        this.bounding_box.x+(Math.random()*this.bounding_box.width),\n        this.bounding_box.y+(Math.random()*this.bounding_box.height),\n      ),\n      50+(Math.random()*50)\n    );\n    this.decay_rate = (Math.floor(Math.random()*1001)+1000)/1000.0;\n  }\n\n  did_update(delta_time:number): void {\n    super.did_update(delta_time);\n    const new_alpha = this.fill_color.alpha - (this.decay_rate*delta_time);\n    if(new_alpha > 0.0) this.fill_color.alpha = new_alpha;\n    else this.kill();\n  }\n\n}\n","import Point from '@/models/Point';\nimport Rect from '@/models/Rect';\nimport ScreenCircle from '@/models/ScreenCircle';\nimport Sprite from '@/models/Sprite';\nimport { SpriteStatus } from '@/models/SpriteStatus';\nimport ExplosionParticle from './ExplosionParticle';\n\nexport default class Explosion extends Sprite {\n\n  particles: Sprite[] = [];\n\n  constructor(exploder:ScreenCircle, particle_size = 2, particle_count = 100) {\n    super(exploder.location.copy(), null, Rect.centered_at(exploder.location, 200, 200));\n    for(let i = 0; i < particle_count; i++) {\n      this.particles.push(new ExplosionParticle(this, exploder.fill_color, particle_size))\n    }\n  }\n\n  get collision_box(): Rect {\n    return Rect.null_rect.copy();\n  }\n\n  update(delta_time:number): void {\n    this.particles = this.particles.filter(particle => {\n      particle.update(delta_time);\n      return particle.status !== SpriteStatus.Dead;\n    })\n  }\n\n  draw_sprite(ctx:CanvasRenderingContext2D): void {\n    this.particles.forEach(particle => particle.draw_sprite(ctx));\n  }\n\n}\n","import GameWorld from '@/models/GameWorld';\nimport Point from '@/models/Point';\nimport { GameStatus } from '@/models/GameStatus';\nimport { SpriteStatus } from '@/models/SpriteStatus';\nimport GameStatePaused from './GameStatePaused';\nimport Player from './Player';\nimport Enemy from './Enemy';\nimport Projectile from './Projectile';\nimport Explosion from './Explosion';\n\nexport default class DiscDestroyerWorld extends GameWorld {\n\n  _player: Player;\n  spawn_rate: number = 0;\n\n  constructor(p:Player) {\n    super();\n    this._player = p;\n    this.reset()\n  }\n\n  get player(): Player { return this._player; }\n  get projectiles(): Projectile[] { return this.sprites[1] as Projectile[]; }\n  get enemies(): Enemy[] { return this.sprites[2] as Enemy[]; }\n  get explosions(): Explosion[] { return this.sprites[3] as Explosion[]; }\n\n  get is_paused(): boolean {\n    return this.status == GameStatus.Paused\n  }\n\n  reset(): void {\n    this.sprites.length = 0;\n    this.sprites.push([this._player])\n    this.sprites.push([]);\n    this.sprites.push([]);\n    this.sprites.push([]);\n    this.player.reset();\n  }\n\n  will_update(delta_time:number): boolean {\n    if(Math.random()*1000 < this.spawn_rate) {\n      const radius = Math.floor(Math.random()*15)+5\n      this.enemies.push(new Enemy(this.viewport));\n    }\n    return true;\n  }\n\n  did_update(): void {\n    if(this.player.score < 200){\n      this.spawn_rate = 2;\n    } else if (this.player.score < 500) {\n      this.spawn_rate = 3;\n    } else if (this.player.score < 900) {\n      this.spawn_rate = 5;\n    } else {\n      this.spawn_rate = 8;\n    }\n    if(this.player.health <= 0) {\n      this.player.health = 0;\n    }\n  }\n\n  fire_projectile_to(location:Point): void {\n    if(this.is_paused || this.projectiles.length >= 3) return;\n    this.projectiles.push(new Projectile(this.player, location));\n  }\n\n  detect_collisions(delta_time:number): void {\n    this.enemies.forEach(enemy => {\n      if(enemy.location.compare_distance(this.player.location, enemy.radius+this.player.radius) <= 0) {\n        enemy.kill();\n        this.player.health -= 1;\n      }\n      this.projectiles.forEach(projectile => {\n        if(enemy.location.compare_distance(projectile.location, enemy.radius+projectile.radius) <= 0) {\n          enemy.take_damage();\n          this.player.hits += 1;\n          this.player.update_accuracy_score();\n          projectile.kill();\n          this.explosions.push(new Explosion(projectile, 1, 25));\n        }\n      });\n    });\n  }\n\n  sprite_cleanup(delta_time:number): void {\n    this.enemies.forEach(enemy => {\n      if(enemy.status === SpriteStatus.Dead) {\n        if(enemy.health <= 0) {\n          this.player.score += Math.round(10*this.player.accuracy);\n        }\n        this.explosions.push(new Explosion(enemy, 3, 75));\n      }\n    })\n    super.sprite_cleanup(delta_time);\n  }\n\n}\n","import Color from '@/models/Color';\nimport { GameStatus } from '@/models/GameStatus';\nimport GameWorld from '@/models/GameWorld';\nimport GameWorldState from '@/models/GameWorldState';\n\nexport default class GameStatePaused extends GameWorldState {\n\n  old_state: GameWorldState;\n  fill_color = new Color(127, 127, 127, 0.5);\n\n  constructor(world:GameWorld) {\n    super(world);\n    this.old_state = world.state;\n    this.status = GameStatus.Paused;\n  }\n\n  work_complete(): void {\n    this.world.state = this.old_state;\n  }\n\n  will_update(delta_time:number): boolean {\n    return false;\n  }\n\n  did_draw(ctx:CanvasRenderingContext2D): void {\n    ctx.fillStyle = this.fill_color.rgba;\n    ctx.fillRect(0, 0, this.world.viewport.width, this.world.viewport.height);\n  }\n\n}","import Color from '@/models/Color';\nimport Point from '@/models/Point';\nimport Rect from '@/models/Rect';\nimport ScreenCircle from '@/models/ScreenCircle';\n\nexport default class Player extends ScreenCircle {\n\n  health: number = 5;\n  shots_fired: number = 0;\n  hits: number = 0;\n  private _accuracy: number = 1;\n  private _score: number = 0;\n\n  constructor(location:Point, bounding_box:Rect) {\n    super(location, null, 20, bounding_box);\n    this.fill_color = new Color(255, 255, 0, 1);\n    this.reset();\n  }\n\n  reset(): void {\n    this.health = 5;\n    this.shots_fired = 0;\n    this.hits = 0;\n    this._accuracy = 1;\n    this._score = 0;\n  }\n\n  get accuracy(): number { return this._accuracy; }\n  update_accuracy_score(): void {\n    this._accuracy = this.hits/this.shots_fired;\n  }\n\n  get score(): number { return this._score; }\n  set score(new_score:number) {\n    this.update_accuracy_score();\n    this._score = new_score;\n  }\n\n}\n","\n//import { Modal } from 'bootstrap';\nimport DiscDestroyerWorld from './DiscDestroyerWorld';\nimport GameStatePaused from './GameStatePaused';\nimport Player from './Player';\nimport Point from '@/models/Point';\nimport Rect from '@/models/Rect';\nimport ScreenCircle from '@/models/ScreenCircle';\n\nimport { ref, watch, onMounted, onBeforeUnmount, Ref, reactive } from 'vue';\nimport GameWorldState from '@/models/GameWorldState';\nimport { GameStatus } from '@/models/GameStatus';\n\nclass Modal {\n\n  modal_element: HTMLElement;\n\n  constructor(modal_element:HTMLElement, options:any) {\n    this.modal_element = modal_element;\n  }\n\n  show() {\n    this.modal_element.dataset.modalShow = '';\n  }\n\n  hide() {\n    delete this.modal_element.dataset.modalShow;\n  }\n\n}\n\nexport default {\n  setup() {\n    const game_container: Ref<HTMLDivElement|null> = ref(null);\n    const game_canvas: Ref<HTMLCanvasElement|null> = ref(null);\n    const game_start_modal: Ref<HTMLDivElement|null> = ref(null);\n    const game_over_modal: Ref<HTMLDivElement|null> = ref(null);\n\n    const screen_rect = new Rect(0, 0, 640, 480);\n    const player = reactive(new Player(screen_rect.midpoint(), screen_rect.copy())) as Player;\n    const game_world = reactive(new DiscDestroyerWorld(player)) as DiscDestroyerWorld;\n\n    const game_starting_state = new GameWorldState(game_world, GameStatus.Starting);\n    game_starting_state.will_update = () => false;\n    game_starting_state.will_draw = () => false;\n\n    const game_over_state = new GameWorldState(game_world, GameStatus.GameOver);\n\n\n    const modals = {\n      start_game: <Modal|null>null,\n      game_over: <Modal|null>null,\n    };\n\n    function screen_was_clicked(event:MouseEvent): void {\n      if(!game_canvas.value) return;\n      const offset = total_offset(game_canvas.value);\n      game_world.fire_projectile_to(new Point(\n        event.pageX - offset.x,\n        event.pageY - offset.y\n      ));\n    }\n\n    function total_offset(element:HTMLElement): Point {\n      const offset = new Point(0,0);\n      let el = element;\n      do {\n        offset.x += el.offsetLeft;\n        offset.y += el.offsetTop;\n        if(!el.offsetParent) return offset;\n        el = el.offsetParent as HTMLElement;\n      } while(true);\n    }\n\n    function init_game(): void {\n      if(!(game_canvas.value && game_container.value)) return;\n      modals.start_game = new Modal(game_start_modal.value as HTMLDivElement, {backdrop: 'static'});\n      modals.game_over = new Modal(game_over_modal.value as HTMLDivElement, {backdrop: 'static'});\n      game_canvas.value.width = screen_rect.width;\n      game_canvas.value.height = screen_rect.height;\n      game_world.state = game_starting_state;\n      const ctx = game_canvas.value.getContext('2d') as CanvasRenderingContext2D;\n      game_world.setup(ctx);\n      ctx.canvas.parentElement?.addEventListener('click', screen_was_clicked);\n      setInterval(update, 0);\n      draw(ctx);\n    }\n    onMounted(init_game);\n\n    function start_game() {\n      game_world.reset();\n      game_world.state = new GameWorldState(game_world);\n    }\n\n    function update() {\n      game_world.update(Math.floor(performance.now())/1000);\n    }\n\n    function draw(ctx:CanvasRenderingContext2D) {\n      ctx.clearRect(0, 0, screen_rect.width, screen_rect.height);\n      game_world.draw(ctx);\n      requestAnimationFrame(() => draw(ctx));\n    }\n\n    function toggle_pause() {\n      if(game_world.is_paused) {\n        game_world.state.work_complete();\n      } else {\n        game_world.state = new GameStatePaused(game_world);\n      }\n    }\n\n    watch( () => game_world.state, (new_state, old_state) => {\n      modals.start_game?.hide();\n      modals.game_over?.hide();\n      switch(game_world.status) {\n        case GameStatus.Starting:\n          modals.start_game?.show();\n          break;\n        case GameStatus.GameOver:\n          modals.game_over?.show();\n          break;\n      }\n    });\n\n    watch( () => game_world.player.health, (new_health, old_health) => {\n      if(new_health <= 0) game_world.state = game_over_state;\n    });\n\n    return {\n      player,\n      game_world,\n      game_container,\n      game_canvas,\n      game_start_modal,\n      game_over_modal,\n      start_game,\n      toggle_pause,\n    }\n  }\n}\n","import { render } from \"./DiscDestroyer.vue?vue&type=template&id=59b8d771&scoped=true&bindings={}\"\nimport script from \"./DiscDestroyer.vue?vue&type=script&lang=ts\"\nexport * from \"./DiscDestroyer.vue?vue&type=script&lang=ts\"\n\nimport \"./DiscDestroyer.vue?vue&type=style&index=0&id=59b8d771&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-59b8d771\"\n\nexport default script","'use strict';\nvar toObject = require('../internals/to-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.fill` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","var $ = require('../internals/export');\nvar fill = require('../internals/array-fill');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.fill` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\n$({ target: 'Array', proto: true }, {\n  fill: fill\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('fill');\n"],"sourceRoot":""}